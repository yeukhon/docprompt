import re
def directive(prefix, groupname, deli):
    if deli:
        return r'(({pf})\s+(?P<{gn}>[^.+^\r\n]+)){deli}'.format(pf=prefix,\
                                                        gn=groupname,\
                                                        deli=deli)
    else:
        return r'({pf})\s+(?P<{gn}>[^.+^\r\n]+)'.format(pf=prefix, gn=groupname) 

def chain_directive(prefix_group):
    """
    Construct a docprompt chain regex directive.

    Parameters
    ----------
    prefix_group : list
        A list of tuples of (prefix, groupname, deli) with deli \
        either '' or a valid regex pattern delimeter such as * or +.
        e.g. [ (':prompt:', 'question'), ('name', 'vname'), \
               ( ':default:', 'default', '*') ]

    Returns
    -------
    pattern : string
        A docprompt chain regex.

    """
    return r'([\r\n][\s]+)*'.join( [directive(pf, gn, deli) for (pf, gn, deli)  in prefix_group] )

keys = [ (':prompt:', 'question', ''),\
         (':name:', 'vname', ''),\
         (':choices:', 'choices', '?'),\
         (':default:', 'default', '?')
       ]

def keys_iter(pattern, text):
    return [m.groupdict() for m in pattern.finditer(text)]

"""
pp = chain_directive(l)
#assert pp == r'(:prompt:)\s+(?P<question>[^.+^\r\n]+)[\r\n][\s]+(:name:)\s+(?P<vname>[^.+^\r\n]+)
print pp
pp = re.compile(pp)
p1 = re.compile(r'(:prompt:)\s+(?P<question>[^.+^\r\n]+)[\r\n][\s]+(:name:)\s+(?P<vname>[^.+^\r\n]+)')
#p2 = re.compile(r'(:prompt:)\s+(?P<question>{c}){cl}(:name:)\s+(?P<vname>{c}){cl}(:default:)\s(?P<default>{c})'.format(c=core))
p2 = re.compile(r'((:prompt:)\s+(?P<question>[^.+^\r\n]+))[\r\n][\s]+(:name:)\s+(?P<vname>[^.+^\r\n]+)[\r\n][\s]+((:default:)\s(?P<{c}>[^.+^\r\n]+))*'.format(c='default'))

match1 = p1.findall(rest_text)

import pprint

pprint.pprint([m.groupdict() for m in pp.finditer(rest_text)])






#np = r'((:choices:)\s+(?P<choices>[^.+^\r\n]+))?([\r\n][\s]+)?((:default:)\s+(?P<default>[^.+^\r\n]+))?'
np = r'(:prompt:)\s+(?P<question>[^.+^\r\n]+)([\r\n][\s]+)?(:name:)\s+(?P<vname>[^.+^\r\n]+)([\r\n][\s]+)?((:choices:)\s+(?P<choices>[^.+^\r\n]+))*([\r\n][\s]+)?((:default:)\s+(?P<default>[^.+^\r\n]+))?'

#p4 = re.compile(np)
#t = """
#:choices: hello
#:default: nigga
#"""
#pprint.pprint([m.groupdict() for m in p4.finditer(t)])
"""
"""

